1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Next.js –ø—Ä–æ–µ–∫—Ç—É
üìå –í–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É —É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ:
npx create-next-app@latest booking_appartement
2Ô∏è‚É£ –ü–µ—Ä–µ—Ö—ñ–¥ —É –ø–∞–ø–∫—É –∑ –ø—Ä–æ–µ–∫—Ç–æ–º
cd booking_appartement
3Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Tailwind —É tailwind.config.js
–í—ñ–¥–∫—Ä–∏–π tailwind.config.js —ñ –∑–∞–º—ñ–Ω–∏ content: [] –Ω–∞:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
}
üîπ –¶–µ –≤–∫–∞–∑—É—î Tailwind, —É —è–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö —à—É–∫–∞—Ç–∏ –∫–ª–∞—Å–∏.
4Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è Tailwind —É –≥–ª–æ–±–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ
–í—ñ–¥–∫—Ä–∏–π —Ñ–∞–π–ª styles/globals.css —ñ –¥–æ–¥–∞–π —Ü—ñ —Ä—è–¥–∫–∏:
@tailwind base;
@tailwind components;
@tailwind utilities;
5Ô∏è‚É£–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç—É
npm run dev

-------------------------------------------
# Setting Up ESLint in a Next.js Project

This guide will walk you through setting up **ESLint** in a **Next.js** project with a configuration optimized for best practices, including **TypeScript** and **Prettier** integration.

**1. Install Required Packages**

Run the following command in your Next.js project:
npm install --save-dev eslint eslint-config-next eslint-config-prettier prettier

This will install:
- `eslint` - The core ESLint package
- `eslint-config-next` - Next.js-specific ESLint rules
- `eslint-config-prettier` - Ensures ESLint doesn't conflict with Prettier
- `prettier` - Code formatter for consistent styling

If you are using **TypeScript**, install additional dependencies:
npm install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin

**2. Configure ESLint**

Create an ESLint configuration file named **`eslint.config.mjs`** in the root of your project:
import { FlatCompat } from '@eslint/eslintrc';
import js from '@eslint/js';

const compat = new FlatCompat({
  baseDirectory: import.meta.dirname,
  recommendedConfig: js.configs.recommended,
});

const eslintConfig = [
  ...compat.config({
    extends: [
      'eslint:recommended', // Base ESLint rules
      'next/core-web-vitals', // Core Web Vitals optimization
      'next/typescript', // Next.js TypeScript rules
      'prettier', // Prettier integration
      'plugin:@next/next/recommended', // Recommended Next.js rules
    ],
    settings: {
      next: {
        rootDir: 'packages/my-app/',
      },
    },
    rules: {
      'react/no-unescaped-entities': 'off',
      '@next/next/no-page-custom-font': 'off',
      '@next/next/no-img-element': 'warn', // Allow <img> but warn
      '@next/next/no-typos': 'error',
      '@next/next/no-html-link-for-pages': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
    },
  }),
];

export default eslintConfig;

**3. Create .eslintignore**

To exclude unnecessary files from linting, create a `.eslintignore` file:
node_modules/
dist/
.next/
out/
build/
public/

This ensures that ESLint doesn't check generated or unnecessary files.

4. Add ESLint to Package.json Scripts**

Modify your `package.json` to include ESLint scripts:
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint --max-warnings=0 --fix",
  "lint:watch": "nodemon -e js,jsx,ts,tsx --exec \"npm run lint\""
},

- `npm run lint` ‚Üí Runs ESLint and fixes problems.
- `npm run lint:watch` ‚Üí Watches for changes and auto-lints files.

If you're using **Husky** for pre-commit hooks, add this to your `package.json`:
"husky": {
  "hooks": {
    "pre-commit": "lint-staged"
  }
},
"lint-staged": {
  "*.{js,jsx,ts,tsx}": "npm run lint -- --fix"
}

This ensures ESLint runs before every commit.

**5. Running ESLint**

Run ESLint manually to check for errors:
npm run lint

If you want to fix errors automatically, run:

npm run lint -- --fix

**6. Using ESLint Directives in Next.js**

If you need to disable ESLint for a specific line or block of code, you can use:

- **Disable for one line:**

  const CustomNextArrow = (props) => {
    const { slideCount, currentSlide, ...rest } = props; // eslint-disable-line
    return <button {...rest} className="slick-next">Next</button>;
  };

- **Disable for next line:**

  // eslint-disable-next-line @next/next/no-img-element
  <img src="/image.jpg" alt="Example" />

- **Disable for a whole file:**

  /* eslint-disable */
  console.log("ESLint will not check this file");
  /* eslint-enable */

**7. Additional Configurations**

If you want to integrate **Prettier** and ESLint together, create a `.prettierrc` file:
{
  "singleQuote": true,
  "semi": false,
  "tabWidth": 2
}

You can then run **Prettier** formatting alongside ESLint:
npx prettier --write .

## **Conclusion**

With this setup, your Next.js project now has a robust ESLint configuration that:
‚úî Automatically detects and fixes errors
‚úî Supports Next.js, TypeScript, and Prettier
‚úî Works with Git hooks to ensure clean commits

If you encounter issues, run:
npx next lint --fix
or manually inspect errors in your files. Happy coding! üöÄ

‚úÖ npm run lint ‚Üí –ó–∞–ø—É—Å–∫–∞—î ESLint –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.
____________________________________________________________________________
Get Started on Google Maps Platform
üöÄ –ö—Ä–æ–∫–∏ –¥–ª—è –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è Google Maps:
1Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ @react-google-maps/api
npm install @react-google-maps/api


